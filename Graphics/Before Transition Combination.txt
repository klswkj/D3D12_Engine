01. D3D12_RESOURCE_STATE_COMMON	                    = 0x0,   => CPU ACCESS(can be implicit prompt)
02. D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER	= 0x1,   => read-only
03. D3D12_RESOURCE_STATE_INDEX_BUFFER	           = 0x2,    => read-only
04. D3D12_RESOURCE_STATE_RENDER_TARGET	           = 0x4,    => Write-only
05. D3D12_RESOURCE_STATE_UNORDERED_ACCESS	       = 0x8,    => read/write
06. D3D12_RESOURCE_STATE_DEPTH_WRITE	           = 0x10,   => write-only
07. D3D12_RESOURCE_STATE_DEPTH_READ	               = 0x20,   => read-only, can be combined with other read states(ex. PIXEL-SHADER_RESOURCE)
08. D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 0x40,   => read-only, can be combined with D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE
09. D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE	   = 0x80,   => read-only, be used with a pixel shader
10. D3D12_RESOURCE_STATE_STREAM_OUT	               = 0x100,  => write-only
11. D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT	       = 0x200,  => read-only
12. D3D12_RESOURCE_STATE_COPY_DEST	               = 0x400,  => write-only
13. D3D12_RESOURCE_STATE_COPY_SOURCE	           = 0x800,  => read-only
14. D3D12_RESOURCE_STATE_RESOLVE_DEST	           = 0x1000,
15. D3D12_RESOURCE_STATE_RESOLVE_SOURCE	           = 0x2000,
16. D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 0x400000,
17. D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 0x1000000,
18. D3D12_RESOURCE_STATE_GENERIC_READ	     = (0x1 | 0x2 | 0x40 | 0x80 | 0x200 | 0x800) => This is the required starting state for an upload heap. when possible, should avoid this state.
19. D3D12_RESOURCE_STATE_PRESENT	         = 0,
20. D3D12_RESOURCE_STATE_PREDICATION	     = 0x200,   => See predication.
21. D3D12_RESOURCE_STATE_VIDEO_DECODE_READ	 = 0x10000,
22. D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE	 = 0x20000,
23. D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ	 = 0x40000,
24. D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 0x80000,
25. D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ	 = 0x200000,
26. D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE	 = 0x800000
====================================================================
Read / Write

Read : 
01. D3D12_RESOURCE_STATE_PRESENT	                = 0,
02. D3D12_RESOURCE_STATE_COMMON	                    = 0x0,   => CPU ACCESS(can be implicit prompt)
03. D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER	= 0x1,   => read-only
04. D3D12_RESOURCE_STATE_INDEX_BUFFER	            = 0x2,   => read-only
05. D3D12_RESOURCE_STATE_UNORDERED_ACCESS	        = 0x8,   => read/write
06. D3D12_RESOURCE_STATE_DEPTH_WRITE	            = 0x10,  => write-only
07. D3D12_RESOURCE_STATE_DEPTH_READ	                = 0x20,  => read-only, can be combined with other read states(ex. PIXEL-SHADER_RESOURCE)
08. D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE  = 0x40,  => read-only, can be combined with D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE
09. D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE	    = 0x80,  => read-only, be used with a pixel shader
10. D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT	        = 0x200, => read-only
11. D3D12_RESOURCE_STATE_COPY_SOURCE	            = 0x800, => read-only
12. D3D12_RESOURCE_STATE_GENERIC_READ	            = (0x1 | 0x2 | 0x40 | 0x80 | 0x200 | 0x800) => This is the required starting state for an upload heap. when possible, should avoid this state.

Write :
01. D3D12_RESOURCE_STATE_COMMON	                   = 0x0,   => CPU ACCESS(can be implicit prompt)
02. D3D12_RESOURCE_STATE_RENDER_TARGET	           = 0x4,   => Write-only
03. D3D12_RESOURCE_STATE_DEPTH_WRITE	           = 0x10,  => write-only
04. D3D12_RESOURCE_STATE_STREAM_OUT	               = 0x100, => write-only
05. D3D12_RESOURCE_STATE_COPY_DEST	               = 0x400, => write-only
